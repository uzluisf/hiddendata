<!DOCTYPE html>
<meta charset="utf-8">
<html>
<head>
  <title>NYC SQF</title>
<script src="https://d3js.org/d3.v4.min.js"></script>
<script src="https://d3js.org/d3-tile.v0.0.min.js"></script>
<script src="https://d3js.org/topojson.v1.min.js"></script>
</head>
<style type="text/css">

.axis--x path {
  display: none;
}

.line {
  fill: none;
  stroke: steelblue;
  stroke-width: 1.5px;
}

.ticks {
  font: 10px sans-serif;
}

.track,
.track-inset,
.track-overlay {
  stroke-linecap: round;
}

.track {
  stroke: #000;
  stroke-opacity: 0.3;
  stroke-width: 10px;
}

.track-inset {
  stroke: #ddd;
  stroke-width: 8px;
}

.track-overlay {
  pointer-events: stroke;
  stroke-width: 50px;
  stroke: transparent;
  cursor: crosshair;
}

.handle {
  fill: #fff;
  stroke: #000;
  stroke-opacity: 0.5;
  stroke-width: 1.25px;
}

.active {
  stroke: #000;
  stroke-width: 2px;
}

</style>
<body>
<script>

var current = null,
    run = false,
    colors = ["#FEE5D9", "#FCAE91", "#FB6A4A", "#DE2D26", "#A50F15"],
    width = window.innerWidth/2,
    height = window.innerHeight-20,
    bwidth = (3/4)*width,
    bheight = (3/8)*height,
    margin = {top: 10, right: 10, bottom: 10, left: 10},
    space = 100,
    centered,
    stops_data,
    stops,
    i=0,
    pct,
    slider,
    cols,
    sum,
    names,
    sex = "All",
    minAge = 16,
    maxAge = 64;

var pi = Math.PI,
    tau = 2 * pi;

var minZoom = 19,
    maxZoom = 24;

var current = null;

d3.csv("census.black.csv", function(error, data) {
    if (error) throw error;
    censusBlack = data;
});
d3.csv("census.hisp.csv", function(error, data) {
    if (error) throw error;
    censusHisp = data;
});
d3.csv("census.white.csv", function(error, data) {
    if (error) throw error;
    censusWhite = data;
});
d3.csv("stops.black.csv", function(error, data) {
    if (error) throw error;
    stopsBlack = data;
});
d3.csv("stops.hisp.csv", function(error, data) {
    if (error) throw error;
    stopsHisp = data;
});
d3.csv("stops.white.csv", function(error, data) {
    if (error) throw error;
    stopsWhite = data;
    getRates();
});

var months = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];

var monthDays = [0,31,28,31,30,31,30,31,31,30,31,30];
var sumDays = [];
monthDays.reduce(function(a,b,i) { return sumDays[i] = a+b; },0);

var stringToDate = d3.timeParse("%Y%m%d");
var dateToString = d3.timeFormat("%Y%m%d");
var dateRange;

var x = d3.scaleBand().rangeRound([0, bwidth-margin.left-margin.right-space]).padding(0.1),
    y = d3.scaleLinear().rangeRound([bheight, 0]);

var xslider = d3.scaleLinear()
                .domain([0, 365])
                .range([0, 410]);

format = d3.format(",");

var projection = d3.geoMercator()
    .scale(1 / tau)
    .translate([0, 0]);

var path = d3.geoPath()
    .projection(projection);

var tile = d3.tile()
    .size([width, height]);

var zoom = d3.zoom()
    .scaleExtent([1 << minZoom, 1 << maxZoom])
    .on("zoom", zoomed);

var svg = d3.select('body')
          .append('svg')
          .attr('width', width)
          .attr('height', height)
          .attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');

var raster = svg.append("g");

var vector = svg.append("g");

d3.json("precincts.geojson", function(error,data) {

precincts = vector.selectAll('path')
.data(data.features)
.enter()
.append('path')
.attr('fill', function(d) { return d.properties.Color; })
.attr('stroke', 'black')
.on("mouseover", handleMouseOver)
.on("mouseout", handleMouseOut)
.on("click", handleMouseClick);

  // Compute the projected initial center.
  var center = projection([-73.95, 40.70]);

  // Apply a zoom transform equivalent to projection.{scale,translate,center}.
  svg
      .call(zoom)
		      .call(zoom.transform, d3.zoomIdentity
		      .translate(width / 2, height / 2)
		      .scale(1 << minZoom)
		      .translate(-center[0], -center[1]));

vector.append('rect')
 .attr('fill','white')
 .attr('stroke','black')
 .attr('x',0)
 .attr('y',0)
 .attr('height',60)
 .attr('width',290)
 .attr('fill-opacity',1);

vector.selectAll('#legend')
 .data(colors)
 .enter()
 .append('rect')
 .attr('fill', function(d) { return d; })
 .style('stroke', 'black')
 .attr('x', function(d,i){ return (i*50)+20; })
 .attr('y', 20)
 .attr('height', 20)
 .attr('width', 50)
 .transition()
 .duration(1000)
 .style("fill-opacity", 1);

vector.append('text')
 .attr('x', 145)
 .attr('y', 15)
 .text('Stops per 100,000 population')
 .attr('text-anchor', 'middle')
 .style('fill', 'black')
 .style('fill-opacity', 1);

vector.append('text')
 .attr('x', 45)
 .attr('y', 55)
 .text('Less Stops')
 .attr('text-anchor', 'middle')
 .style('fill', 'black')
 .style('fill-opacity', 1);

vector.append('text')
 .attr('x', 4*50+45)
 .attr('y', 55)
 .text('More Stops')
 .attr('text-anchor', 'middle')
 .style('fill', 'black')
 .style('fill-opacity', 1);
});

function zoomed() {
  var transform = d3.event.transform;

  var tiles = tile
      .scale(transform.k)
      .translate([transform.x, transform.y])
      ();

  projection
      .scale(transform.k / tau)
      .translate([transform.x, transform.y]);

precincts.attr("d", path);

<!-- arrests.attr('cx', function(d) { return projection(d.geometry.coordinates)[0]; }) -->
<!-- .attr('cy', function(d) { return projection(d.geometry.coordinates)[1]; }) -->
<!-- .attr('stroke', 'blue') -->
<!-- .attr('fill', 'blue') -->
<!-- .attr('r', '1px'); -->

if (transform.k > 2000000) {
vector.attr('fill','no-fill').attr('fill-opacity', 0);
} else {
vector.attr('fill', function(d,i) { return 'red';}).attr('fill-opacity', .75);
}
  var image = raster
      .attr("transform", stringify(tiles.scale, tiles.translate))
    .selectAll("image")
    .data(tiles, function(d) { return d; });

  image.exit().remove();

  image.enter().append("image")
      .attr("xlink:href", function(d) { return "http://" + "abc"[d[1] % 3] + ".tile.openstreetmap.org/" + d[2] + "/" + d[0] + "/" + d[1] + ".png"; })
      .attr("x", function(d) { return d[0] * 256; })
      .attr("y", function(d) { return d[1] * 256; })
      .attr("width", 256)
      .attr("height", 256);
}

function stringify(scale, translate) {
  var k = scale / 256, r = scale % 1 ? Number : Math.round;
  return "translate(" + r(translate[0] * scale) + "," + r(translate[1] * scale) + ") scale(" + k + ")";
}

d3.interval(function() {
  if (run) {
    console.log("run");
    var date = dateRange[i%dateRange.length];

    d3.selectAll('circle').remove();

    slider.insert("circle", ".track-overlay")
      .attr("class", "handle")
      .attr("cx", xslider(i%365))
      .attr("id", "longitude")
      .attr("r", 9);

    d3.selectAll("#dateText").remove();

    var displayDate = d3.timeFormat("%B %e")(stringToDate(date));

    slider.insert("text")
          .attr("id","dateText")
          .attr("x", 205)
          .attr("y", -15)
          .text(displayDate)
          .attr("text-anchor","middle");

    stops.selectAll('circle')
         .data(stops_data.features)
         .enter()
         .append('circle')
         .filter(function(d){ return d.properties.Date === date; })
         .attr('cx', function(d) { return projection(d.geometry.coordinates)[0]; })
         .attr('cy', function(d) { return projection(d.geometry.coordinates)[1]; })
         .attr('r', 5)
         .style('fill', 'green')
	 .style('stroke', 'green').attr('fill-opacity',1);


    i++;
  }
}, 750);

function drawStops(precinct,year) {
  console.log("Draw Stops");
  i = 0;
  sdate = year+"0101";
  edate = year+"1231";

  dateRange = d3.timeDays(stringToDate(sdate), stringToDate(edate));
  for (k=0;k<dateRange.length;k++) {
    dateRange[k] = dateToString(dateRange[k])
  }

  var pointsPath = "./Data/points."+precinct+"."+year+".geojson";
  d3.json(pointsPath, function(error,data) {
    stops_data = data;
    run = true;
  });
}

function handleMouseOver() {  // Add interactivity
            // Use D3 to select element, change color and size
            d3.select(this).attr("fill", "grey");
}

function handleMouseOut() {
            // Use D3 to select element, change color back to normal
            d3.select(this).attr("fill", function(d) { return d.properties.Color; });
            if (current != null) {
              current.attr("fill","grey");
            }
}

function handleMouseClick(d) {  // Add interactivity
            // Use D3 to select element, change color and size

            run = false;

            pct = d.properties.Precinct;

            if (d && centered !== d) {
              centered = d;
              if (current != null) {
                current.attr("fill", function(d) { return d.properties.Color; });
                d3.selectAll("#bar").transition().duration(1000).style("opacity",0).remove();
              }
              current = d3.select(this).attr("fill", "grey");
              drawBar();
            } else {
              centered = null;
            }

}

function barhandleMouseOver() {  // Add interactivity

            // Use D3 to select element, change color and size
            d3.select(this)
              .attr("fill", "orange");

            d3.select(this.parentNode)
              .append("text")
              .attr("id", function(d) { return "t" + d.Stops.replace(/\s/g, ""); })
              .attr("x", function(d) { return x(d.Year) + x.bandwidth()/2; })
              .attr("y", function(d) { return y(d.Stops)-10; })
              .attr("dy", ".35em")
              .text(function(d){ return format(d.Stops); })
              .attr("fill", "black")
              .attr("text-anchor", "middle");
}

function barhandleMouseOut() {
            // Use D3 to select element, change color back to normal

            if (!d3.select(this).classed("on")) {
              d3.select(this).attr("fill", "grey");
            }


            data = d3.select(this).data()[0];

            d3.select("#t" + data.Stops.replace(/\s/g, "")).remove();
}

function barhandleClick(d) {
  console.log(d);
  on = d3.select(this).classed("on");
  d3.selectAll("#barrect").classed("on",false);
  d3.selectAll("#barrect").attr("fill","grey");
  svg.selectAll('#sqf').remove();
  if (on) {
    run = false;
    d3.select(this).classed("on",false);
    d3.select(this).attr("fill", "grey");
  } else {
    stops = vector.append('g').attr('id','sqf');
    d3.select(this).classed("on",true);
    d3.select(this).attr("fill", "orange");
    if (centered) {
      var yr = d.Year;
      drawStops(pct,yr);
    }
  }
}

function drawBar() {

    var name = "stops.year."+pct+".csv";

    xslider = d3.scaleLinear()
                .domain([0, 365])
                .range([0, 410]);

    d3.selectAll('#sqf').remove();
    d3.selectAll("#age-range").remove();

    g2 = d3.select('body')
       .append('svg')
       .attr('id','sqf')
       .attr('width', bwidth)
       .attr('height', height)
       .append('g')
       .attr("transform", "translate(" + (margin.left+space) + "," + ((height-bheight)/2) + ")");


    d3.csv(name, function(error, data) {
      if (error) throw error;

      x.domain(data.map(function(d) { return d.Year; }))
      y.domain([0, d3.max(data, function(d) { return +d.Stops; })])

      var bar = g2.selectAll("g")
                  .attr("id","bar")
                  .data(data)
                  .enter().append("g");

      bar.append("rect")
        .attr("id","barrect")
        .attr("x", function(d) { return x(d.Year); })
        .attr("y", function(d) { return y(d.Stops); })
        .attr("width", x.bandwidth())
        .attr("height", function(d) { return bheight - y(d.Stops); })
        .attr("fill", "grey")
        .on("mouseover", barhandleMouseOver)
        .on("mouseout", barhandleMouseOut)
        .on("click", barhandleClick);

      g2.append("text")
        .attr("x",(bwidth-margin.left-margin.right-space)/2)
        .attr("y",-55)
        .text("Number of Stops")
        .attr("text-anchor", "middle");

      g2.append("text")
        .attr("x",(bwidth-margin.left-margin.right-space)/2)
        .attr("y",-30)
        .text("Precinct "+pct)
        .attr("text-anchor", "middle");

      g2.append("g")
          .attr("class", "axis axis--x")
          .attr("transform", "translate(0," + bheight + ")")
          .call(d3.axisBottom(x));

      g2.append("g")
          .attr("class", "axis axis--y")
          .call(d3.axisLeft(y).ticks(5))
        .append("text")
          .attr("transform", "rotate(-90)")
          .attr("y", 5)
          .attr("dy", "0.71em")
          .attr("text-anchor", "end")
          .text("Arrests");
    });

    slider = d3.select("#sqf")
               .append('g')
               .attr('height', 10)
               .attr("transform", "translate(" + (margin.left+space) + "," + margin.top + ")");

    slider.append("line")
        .attr("class", "track")
        .attr("x1", xslider.range()[0])
        .attr("x2", xslider.range()[1])
      .select(function() { return this.parentNode.appendChild(this.cloneNode(true)); })
        .attr("class", "track-inset")
      .select(function() { return this.parentNode.appendChild(this.cloneNode(true)); })
        .attr("class", "track-overlay")
        .call(d3.drag()
            .on("start.interrupt", function() { slider.interrupt(); })
            .on("start drag", function() { i = d3.format(".0f")(xslider.invert(d3.event.x)); }));

    slider.insert("g", ".track-overlay")
        .attr("class", "ticks")
        .attr("transform", "translate(0," + 18 + ")")
      .selectAll("text")
      .data(sumDays)
      .enter().append("text")
        .attr("x", function(d) {return xslider(d);})
        .attr("text-anchor", "middle")
        .text(function(d,i) { return months[i] ; });

    slider.insert("circle", ".track-overlay")
          .attr("class", "handle")
          .attr("cx", xslider(i%365))
          .attr("id", "longitude")
          .attr("r", 9);
}

g2 = d3.select('body')
       .append('svg')
       .attr('id','sqf')
       .attr('width', bwidth)
       .attr('height', height)
       .append('g')
       .attr("transform", "translate(" + (margin.left+space) + "," + ((height-bheight)/2) + ")");

var xslider = d3.scaleLinear()
                .domain([16, 64])
                .range([0, 410]);

ageMin = 16;
ageMax = 64;

ages = [];
for (var a=ageMin; a <= ageMax; a=a+2){
    ages.push(a);
}

slider = d3.select("#sqf")
           .append('g')
           .attr("id","age-range")
           .attr('height', 10)
           .attr("transform", "translate(" + (margin.left+space) + "," + margin.top + ")");

slider.append("line")
    .attr("class", "track")
    .attr("x1", xslider.range()[0])
    .attr("x2", xslider.range()[1])
  .select(function() { return this.parentNode.appendChild(this.cloneNode(true)); })
    .attr("class", "track-inset")
  .select(function() { return this.parentNode.appendChild(this.cloneNode(true)); })
    .attr("class", "track-overlay");

slider.insert("g", ".track-overlay")
    .attr("class", "ticks")
    .attr("transform", "translate(0," + 18 + ")")
  .selectAll("text")
  .data(ages)
  .enter().append("text")
    .attr("x", function(d) {return xslider(d);})
    .attr("text-anchor", "middle")
    .text(function(d) { return d ; });

slider.append("circle")
      .attr("class", "handle")
      .attr("cx", xslider(ageMin))
      .attr("id", "longitude")
      .attr("r", 9)
      .call(d3.drag()
        .on("start", dragstarted)
        .on("drag", draggedmin)
        .on("end", dragended));

slider.append("circle")
      .attr("class", "handle")
      .attr("cx", xslider(ageMax))
      .attr("id", "longitude")
      .attr("r", 9)
      .call(d3.drag()
        .on("start", dragstarted)
        .on("drag", draggedmax)
        .on("end", dragended));

function dragstarted(d) {
  //d3.select(this).raise().classed("active", true);
}

function draggedmin(d) {
  minAge = Math.max(Math.min(d3.format(".0f")(xslider.invert(d3.event.x)),ageMax),16);
  d3.select(this).attr("cx", xslider(minAge))
                 .attr("class", "handle");
}

function draggedmax(d) {
  maxAge = Math.min(Math.max(d3.format(".0f")(xslider.invert(d3.event.x)),ageMin),64);
  d3.select(this).attr("cx", xslider(maxAge))
                 .attr("class", "handle");
}

function dragended(d) {
  //d3.select(this).classed("active", false);
  getRates();
}

slider.insert("text")
          .attr("id","dateText")
          .attr("x", 205)
          .attr("y", -15)
          .text("Age Range")
          .attr("text-anchor","middle");

function getRates() {
    var x = d3.scaleLinear().range([0, bwidth-margin.left-margin.right-space]),
        y = d3.scaleLinear().range([bheight, 0]),
        z = d3.scaleOrdinal(d3.schemeCategory10);

    var line = d3.line().x(function(d) { return x(d.year); })
                        .y(function(d) { return y(d.rate); });

    d3.selectAll("#line").remove();

    g3 = g2.append("g").attr("id","line");
    cols = [];
for (var age = minAge; age <= maxAge; age++) {
        cnamem = "M"+age;
        cnamef = "F"+age;
        if(sex=="All") {
            cols.push(cnamem);
            cols.push(cnamef);
        } else if (sex == "Male") {
            cols.push(cnamem);
        } else {
            cols.push(cnamef);
	}
}
    rateBlack = [];
    rateHisp = [];
    rateWhite = [];
    for (var yr = 2003;  yr <= 2016; yr++) {
        r = yr-2003;
        pb = d3.sum(cols, function(d){return(censusBlack[r][d]);});
        sb = d3.sum(cols, function(d){return(stopsBlack[r][d]);});
        bRate = (sb/pb)*100000;
        rateBlack.push({year: yr,
                        rate: bRate});

        ph = d3.sum(cols, function(d){return(censusHisp[r][d]);});
        sh = d3.sum(cols, function(d){return(stopsHisp[r][d]);});
        hRate = (sh/ph)*100000;
        rateHisp.push({year: yr,
                       rate: hRate});

        pw = d3.sum(cols, function(d){return(censusWhite[r][d]);});
        sw = d3.sum(cols, function(d){return(stopsWhite[r][d]);});
        wRate = (sw/pw)*100000;
        rateWhite.push({year: yr,
                        rate: wRate});
    }
    lineData = [{id: "Black",
                 values: rateBlack},
                {id: "Hispanic",
                 values: rateHisp},
                {id: "White",
                 values: rateWhite}];
    points = rateBlack.concat(rateHisp).concat(rateWhite);

  x.domain([2003,2016]);

  y.domain([
    d3.min(lineData, function(c) { return d3.min(c.values, function(d) { return d.rate; }); }),
    d3.max(lineData, function(c) { return d3.max(c.values, function(d) { return d.rate; }); })
  ]);

  z.domain(lineData.map(function(c) { return c.id; }));

  g3.append("g")
      .attr("class", "axis axis--x")
      .attr("transform", "translate(0," + bheight + ")")
      .call(d3.axisBottom(x));

  g3.append("g")
      .attr("class", "axis axis--y")
      .call(d3.axisLeft(y))
    .append("text")
      .attr("transform", "rotate(-90)")
      .attr("y", 6)
      .attr("dy", "0.71em")
      .attr("fill", "#000")
      .text("Stop Rate");

  var city = g3.selectAll(".city")
    .data(lineData)
    .enter().append("g")
      .attr("class", "city");

  city.append("path")
      .attr("class", "line")
      .attr("d", function(d) { return line(d.values); })
      .style("stroke", function(d) { return z(d.id); });

  g3.selectAll("dot")
        .data(points)
      .enter().append("circle")
        .attr("r", 5)
        .attr("cx", function(d) { return x(d.year); })
        .attr("cy", function(d) { return y(d.rate); })
        .on("mouseover", hoverover)
        .on("mouseout", hoverout);

  g3.selectAll("rates")
   .data(points)
   .enter().append("text")
   .attr("id", function(d) { return "text"+d.year; })
   .attr("x", function(d) { return x(d.year); })
   .attr("y", function(d) { return y(d.rate)-10; })
   .text(function(d) { return d3.format(",.0f")(d.rate); })
   .attr("text-anchor","middle")
   .attr("visibility","hidden");
}

function hoverover(d) {
    d3.selectAll("#text"+d.year).attr("visibility","visible");
}

function hoverout(d) {
    d3.selectAll("#text"+d.year).attr("visibility","hidden");
}

var allButtons= d3.select("#sqf")
               .append('g')
               .attr('height', 10)
               .attr("transform", "translate(" + (margin.left+space) + "," + margin.top + ")")
               .attr("id","allButtons");

var raceLegend = d3.select("#sqf")
               .append('g')
               .attr('height', 10)
               .attr("transform", "translate(" + (margin.left+space) + "," + margin.top + ")")
			       .attr("id","raceLegend");

var raceColors = [{"race":"Black", "color":"#1f77b4"},
			       {"race":"Hispanic","color":"#ff7f0e"},
			       {"race":"White","color":"#2ca02c"}];

raceLegend.selectAll("g.rect")
			       .data(raceColors)
			       .enter()
			       .append("rect")
			       .attr("x",function(d,i) { return i*70+100; })
			       .attr("y", 150)
			       .attr("height", 20)
			       .attr("width", 70)
			       .attr("fill", function(d) { return d.color })
			       .attr("stroke", "black");

			       raceLegend.selectAll("text")
			       .data(raceColors)
			       .enter()
			       .append("text")
			       .attr("x", function(d,i) { return i*70+135; })
			       .attr("y",140)
			       .text(function (d) { return d.race; })
			       .attr("stroke", "black")
			       .attr("text-anchor", "middle");

//fontawesome button labels
var labels= [{'name':'All'},
             {'name':'Male'},
             {'name':'Female'}];

//colors for different button states
var defaultColor= "#2b8cbe"
var hoverColor= "#cccccc"
var pressedColor= "#636363"

//groups for each button (which will hold a rect and text)
var buttonGroups= allButtons.selectAll("g.button")
.data(labels)
.enter()
.append("g")
.attr("class","button")
.style("cursor","pointer")
.on("click",function(d,i) {
updateButtonColors(d3.select(this), d3.select(this.parentNode))
sex = d.name;
getRates();
})
.on("mouseover", function() {
if (d3.select(this).select("rect").attr("fill") != pressedColor) {
d3.select(this)
.select("rect")
.attr("fill",hoverColor);
}
})
.on("mouseout", function() {
if (d3.select(this).select("rect").attr("fill") != pressedColor) {
d3.select(this)
.select("rect")
.attr("fill",defaultColor);
}
})

var bWidth= 120; //button width
var bHeight= 25; //button height
var bSpace= 10; //space between buttons
var x0= 15; //x offset
var y0= 40; //y offset

//adding a rect to each toggle button group
//rx and ry give the rect rounded corner
buttonGroups.append("rect")
.attr("class","buttonRect")
.attr("width",bWidth)
.attr("height",bHeight)
.attr("x",function(d,i) {return x0+(bWidth+bSpace)*i;})
.attr("y",y0)
.attr("rx",5) //rx and ry give the buttons rounded corners
.attr("ry",5)
.attr("fill", function(d) { if (d.name == "All") {return pressedColor; } else { return defaultColor; }})

//adding text to each toggle button group, centered
//within the toggle button rect
buttonGroups.append("text")
.attr("class","buttonText")
.attr("font-family","FontAwesome")
.attr("x",function(d,i) {
return x0 + (bWidth+bSpace)*i + bWidth/2;
})
.attr("y",y0+bHeight/2)
.attr("text-anchor","middle")
.attr("dominant-baseline","central")
.attr("fill","white")
.text(function(d) {return d.name;})

function updateButtonColors(button, parent) {
parent.selectAll("rect")
.attr("fill",defaultColor)

button.select("rect")
.attr("fill",pressedColor)
}

  </script>
</body>
</html>
